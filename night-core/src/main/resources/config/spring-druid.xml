<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 加载JDBC配置文件-->
    <context:property-placeholder ignore-unresolvable="true" location="classpath:config/jdbc.properties"/>

    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <property name="maxWait" value="${jdbc.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
        <!-- 验证连接是否成功, SQL SELECT 指令至少要返回一行  (测试/验证连接池连接的SQL语句也因数据库而异)-->
        <property name="validationQuery" value="${jdbc.validationQuery}"/>
        <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
        <property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>
        <!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
        <!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
        <property name="testOnReturn" value="${jdbc.testOnReturn}"/>
        <!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。 -->
        <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" />
        <!-- 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。 -->
        <property name="maxOpenPreparedStatements" value="${jdbc.maxOpenPreparedStatements}" />
        <!-- 指定每个PSCache连接上PSCache的大小 -->
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}" />
        <!-- 是否自动回收超时连接 -->
        <property name="removeAbandoned" value="${jdbc.removeAbandoned}"/>
        <!-- 超时时间(以秒数为单位) -->
        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"/>
        <!-- 关闭自动回收超时输出错误日志 -->
        <property name="logAbandoned" value="${jdbc.logAbandoned}" />
        <property name="filters" value="${jdbc.filters}"/>
    </bean>

    <!-- 注册事物管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
        <!--<tx:attributes>-->
            <!--<tx:method name="publish*"/>-->
            <!--<tx:method name="save*"/>-->
            <!--<tx:method name="add*"/>-->
            <!--<tx:method name="update*"/>-->
            <!--<tx:method name="insert*"/>-->
            <!--<tx:method name="create*"/>-->
            <!--<tx:method name="del*"/>-->
            <!--<tx:method name="load*"/>-->
            <!--<tx:method name="init*"/>-->
            <!--<tx:method name="*" read-only="true"/>-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!--&lt;!&ndash; 开启事务注解驱动 &ndash;&gt;-->
    <!--<tx:annotation-driven transaction-manager="transactionManager" />-->
    <!--&lt;!&ndash; 注册事物拦截器 &ndash;&gt;-->
    <!--<bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">-->
        <!--&lt;!&ndash; 事务拦截器需要依赖注入一个事务管理器 &ndash;&gt;-->
        <!--<property name="transactionManager" ref="transactionManager" />-->
        <!--&lt;!&ndash; 定义事务传播属性 &ndash;&gt;-->
        <!--<property name="transactionAttributes">-->
            <!--<props>-->
                <!--<prop key="*">PROPAGATION_REQUIRED</prop>-->
            <!--</props>-->
        <!--</property>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 开启spring方法调用监控 &ndash;&gt;-->
    <!--<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"/>-->

    <!--&lt;!&ndash; APO配置 &ndash;&gt;-->
    <!--<aop:config>-->
        <!--<aop:pointcut id="myPointcut" expression="execution(public * com.limbo.practice.*.service.impl.*.*(..))"/>-->
        <!--<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="myPointcut" />-->
    <!--</aop:config>-->
</beans>